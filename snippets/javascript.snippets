# scope: javascript

snippet maxlen
	// eslint-disable-next-line max-len ${0}

snippet eslint
	// eslint-disable-next-line ${0}

snippet flow
	// @flow
	${0}

snippet noflow
	// @noflow
	${0}

snippet expectError
	// \$ExpectError

snippet fixMe
	// \$FlowFixMe

snippet comment
	//------------------------------------------------------------------------------
	// ${0}
	//------------------------------------------------------------------------------

snippet react
	// @flow
	import * as React from 'react';
	${0}


snippet stf
	import * as React from 'react';
	import { shallow } from 'enzyme';
	import ${1} from './index.js';

	describe('<${1} />', () => {
	  it('${2}', () => {
	    const wrapper = shallow(
	      <${1} ${0} />
	    );
	    expect(wrapper).toMatchSnapshot();
	  });
	});
	

snippet itshallow
	it('${2}', () => {
	  const wrapper = shallow(
	    <${1} ${0} />
	  );
	  expect(wrapper).toMatchSnapshot();
	});

snippet it
	it('${1}', () => {
	  expect(${2}).${0}();
	});

snippet describe
	describe('${1}', () => {
	  it('${2}', () => {
	    const wrapper = shallow(
	      <${1} ${0} />
	    );
	    expect(wrapper).toMatchSnapshot();
	  });
	});

snippet stateless
	// @flow
	import * as React from 'react';
	import css from './styles.css';
	
	type Props = {
	  ${2}
	};
	
	const ${1} = ({${3}}: Props) => {
	  return (
	    <div>
	      ${0}
	    </div>
	  );
	};
	
	export default ${1};

snippet connectedcomponent
	// @flow
	import * as React from 'react';
	import { connect } from 'react-redux';
	import css from './styles.css';
	
	type Props = {
	  ${2}
	};
	
	const mapStateToProps = (state: State): Props => {
	  return {
	    ${3}
	  };
	};
	
	
	const dispatcher = {
	  ${5}
	};
	
	type DispatcherProps = {
	  ${4}
	};
	
	class ${1} extends React.Component<Props & DispatcherProps> {
	  render() {
	    return (
	      <div>
	        ${0}
	      </div>
	    );
	  }
	}
	
	export default connect(mapStateToProps, dispatcher)(${1});


snippet component
	// @flow
	import * as React from 'react';
	import css from './styles.css';
	
	type Props = {
	  ${2}
	};
	
	class ${1} extends React.Component<Props> {
	  render() {
	    return (
	      <div>
	        ${0}
	      </div>
	    );
	  }
	}
	
	export default ${1};

snippet componentstate
	// @flow
	import * as React from 'react';
	import css from './styles.css';
	
	type Props = {
	  ${2}
	};
	
	type State = {
	  ${3}
	}
	
	class ${1} extends React.Component<Props, State> {
	  state = {
	    ${4}
	  }
	  
	  render() {
	    return (
	      <div>
	        ${0}
	      </div>
	    );
	  }
	}
	
	export default ${1};

snippet switch
	switch (${1:expression}) {
	  case ${3:case}:
	    ${4:// code}
	    break;
	  ${0}
	  default:
	    ${2:// code}
	    break;
	}